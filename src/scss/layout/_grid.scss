@import "../../../node_modules/susy/sass/susy/language/susy.scss";

//=====================================================
//  Config
//=====================================================
$minORmax: 'min' !default; // for media queries
$columns: 12;
$gutters: 20px;

$susy: (
  flow: ltr,
  math: fluid,
  output: float,
  gutter-position: inside-static,
  container: auto,
  container-position: center,
  columns: $columns,
  gutters: 0,
  column-width: false,
  global-box-sizing: content-box,
  last-flow: to,
  debug: (
    image: hide,
    color: rgba(#66f, .25),
    output: overlay,
    toggle: top right,
  ),
  use-custom: (
    background-image: true,
    background-options: false,
    box-sizing: true,
    clearfix: false,
    rem: true,
  )
);

//$susy-wrapper-large: (
//  container: auto,
//  columns: 6,
//  gutters: 0,
//  gutter-position: inside-static,
//  column-width: 100px,
//  math: fluid,
//  output: float,
//);
//
//$susy-wrapper: (
//  container: 1024px,
//  columns: 4,
//  gutters: 20px/100px,
//  column-width: 100px,
//  gutter-position: inside-static,
//  math: fluid,
//  output: float,
//);

//=====================================================
//  Grid
//=====================================================

.row {
  @include container(auto);
  &.no-gutter > * { padding: 0; }
}

.no-gutter {
  & > * {
    padding: 0;
  }
}

.row-ib {
  @include container(auto);
  font-size: 0;
  & > * {
    font-size: $font-size-default;
  }
  &.no-gutter > * { padding: 0; }
  &.va-top > * { vertical-align: top; }
}

@mixin shadowGridGenerator($columns, $breakpoint, $prefix, $minORmax) {
  @media screen and (#{unquote($minORmax)}-width: $breakpoint) {
    @for $i from 1 through $columns {
      // float
      %col#{$prefix}-#{$i} {
        @include span($i);
      }
      // inline-block
      %col-ib#{$prefix}-#{$i} {
        @include span($i);
        float: none; // kill float property
        display: inline-block;
      }
      %push#{$prefix}-#{$i} {
        position: relative;
        left: span($i);
      }
      %pull#{$prefix}-#{$i} {
        position: relative;
        left: span($i) * -1;
      }
    }
  }
}

@mixin GridGenerator($columns, $breakpoint, $prefix, $minORmax) {
  @media screen and (#{unquote($minORmax)}-width: $breakpoint) {
    @for $i from 1 through $columns {
      .col#{$prefix}-#{$i} {
        @include span($i);
      }
      .col-ib#{$prefix}-#{$i} {
        @include span($i);
        float: none; // kill float property
        display: inline-block;
      }
      .push#{$prefix}-#{$i} {
        position: relative;
        left: span($i);
      }
      .pull#{$prefix}-#{$i} {
        position: relative;
        left: span($i) * -1;
      }
    }
  }
}

@include shadowGridGenerator($columns, $screen-s, '-s', $minORmax);
@include shadowGridGenerator($columns, $screen-m, '-m', $minORmax);
@include shadowGridGenerator($columns, $screen-l, '-l', $minORmax);

//=====================================================
//  Grid layout for containers
//  Change layout settings according to the wrapper
//=====================================================
//.wrapper {
//  @include with-layout($susy-wrapper) {
//    @include shadowGridGenerator($columns, $screen-s, '-s', $minORmax);
//    @include shadowGridGenerator($columns, $screen-l, '-l', $minORmax);
//    @include shadowGridGenerator($columns, $screen-xl, '-xl', $minORmax);
//  }
//}